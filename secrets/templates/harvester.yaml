{{- if .Values.harvester.enabled }}
# harvester configuration
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets.fullname" . }}-harvester-envs
type: Opaque
stringData:
  MARIADB_DATABASE: {{ .Values.harvester.database.name | default "harvester" }}
  MARIADB_USER: {{ .Values.harvester.database.user | default "harvester" }}
  MARIADB_PASSWORD: "{{ .Values.harvester.database.password }}"
  MARIADB_ROOT_PASSWORD: "{{ .Values.harvester.database.password }}-admin"
  HARVESTER_DB_HOST: "{{ .Values.harvester.database.dbhost | default (printf "%s-mariadb" (include "harvester_ref" .)) }}"
  {{- if .Values.harvester.database.dbhost_add_index }}
  HARVESTER_DB_HOST_ADD_INDEX: "{{ .Values.harvester.database.dbhost_add_index }}"
  HARVESTER_DB_HOST_PREFIX: "{{ .Values.harvester.database.dbhost_prefix }}"
  {{- if .Values.harvester.database.dbhost_domain }}
  HARVESTER_DB_HOST_DOMAIN: "{{ .Values.harvester.database.dbhost_domain }}"
  {{- end }}
  {{- end }}
  {{- if .Values.harvester.database.db_add_index }}
  {{- if .Values.harvester.database.name_prefix }}
  HARVESTER_DB_ADD_INDEX: "{{ .Values.harvester.database.db_add_index }}"
  MARIADB_DATABASE_PREFIX: "{{ .Values.harvester.database.name_prefix }}"
  {{- end }}
  {{- end }}

  {{- if .Values.auth.auth_client_id }}
  # use internal token file instead of long-lived token string
  PANDA_AUTH_ID_TOKEN: "file:/opt/harvester/etc/auth_tokens/panda_token"
  PANDA_AUTH_VO: {{ .Values.auth.authVO }}.internal
  {{- else }}
  PANDA_AUTH_ID_TOKEN: {{ .Values.auth.authIdToken }}
  PANDA_AUTH_VO: {{ .Values.auth.authVO }}
  {{- end }}
  PANDA_BEHIND_REAL_LB: "1"
  PANDA_VERIFY_HOST: "off"
  PANDA_URL: "https://{{ include "panda_ref" . }}-server:{{ .Values.panda.port }}/server/panda"
  PANDA_URL_SSL: "https://{{ include "panda_ref" . }}-server:{{ .Values.panda.sslPort }}/server/panda"

  BIGMON_BASE_URL: ".Values.bigmon.base_url"

  {{- if .Values.harvester.experiment }}
  EXPERIMENT: {{ .Values.harvester.experiment }}
  {{- end}}

  HARVESTER_ID: "{{ .Values.harvester.harvesterID }}"
  CONDOR_CHANNEL: ".{{ .Values.harvester.condorChannel }}"

  {{- if .Values.cric.real }}
  HARVESTER_CRIC_OS: "{{ .Values.cric.objectStores }}"
  HARVESTER_CRIC_DDMENDPOINTS: "{{ .Values.cric.ddmEndpoints }}"
  HARVESTER_CRIC_URL_DDMENDPOINTS: "{{ .Values.cric.ddmEndpoints }}"
  HARVESTER_CRIC_SCHEDCONFIG: "{{ .Values.cric.schedConfig }}"
  {{- else }}
  HARVESTER_CRIC_OS: "https://{{ include "panda_ref" . }}-server:{{ .Values.panda.sslPort }}/cric/ddm_objectstores.json"
  HARVESTER_CRIC_DDMENDPOINTS: "https://{{ include "panda_ref" . }}-server:{{ .Values.panda.sslPort }}/cric/ddm_endpoints.json"
  HARVESTER_CRIC_URL_DDMENDPOINTS: "https://{{ .Values.panda.hostName }}/cric/ddm_endpoints.json"
  HARVESTER_CRIC_SCHEDCONFIG: "https://{{ include "panda_ref" . }}-server:{{ .Values.panda.ssLPort }}/cric/panda_queues.json"
  {{- end }}

  {{ include "set_proxy" . | indent 2 }}

---
# auth files, for example for google cloud
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets.fullname" . }}-harvester-auth
type: Opaque
data:
  {{- range $path, $_ := .Files.Glob "files/harvester_auth/*" }}
  {{ base $path }}: |-
    {{ $.Files.Get $path | b64enc }}
  {{- end }}
  # add the internal token config file exists when it is not provided
  {{- if .Values.auth.auth_client_id }}
  {{- $internal_token_conf := "files/harvester_auth/token_panda-internal_client.json" }}
  {{- if not (.Files.Glob $internal_token_conf) }}
  token_panda-internal_client.json: |-
    {{- $issuer := regexReplaceAll "[^/]*$" .Values.auth.auth_endpoint "" }}
    {{ dict "issuer" $issuer "client_id" .Values.auth.auth_client_id "client_secret" .Values.auth.auth_client_secret | toJson | b64enc }}
  {{- end }}
  {{- end }}

---
# certs
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets.fullname" . }}-harvester-certs
type: Opaque
data:
  {{- range $path, $_ := .Files.Glob "files/harvester_certs/**.pem" }}
  {{ base $path }}: |-
    {{ $.Files.Get $path | b64enc }}
  {{- end }}

{{- end }}

---
# init db
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets.fullname" . }}-harvester-initdb
type: Opaque
stringData:
  init_harvester_db.sql: |-
    {{- $harvestername := .Values.harvester.database.name | default "harvester" }}
    {{- $harvesteruser := .Values.harvester.database.user | default "harvester" }}
    {{- $harvesterpass := .Values.harvester.database.password | default "harvester" }}

    CREATE DATABASE {{$harvestername}};
    CREATE USER '{{$harvesteruser}}'@'%' IDENTIFIED BY '{{$harvesterpass}}';
    GRANT ALL PRIVILEGES ON {{$harvestername}}.* TO '{{$harvesteruser}}'@'localhost';
    GRANT ALL PRIVILEGES ON {{$harvestername}}.* TO '{{$harvesteruser}}'@'%';

    {{- $count := (.Values.harvester.replicaCount | int) }}
    {{- if $count }}
    {{- range $i, $_ := until $count }}
    {{- $harvestername_int := printf "%s_%d" $harvestername $i }}
    CREATE DATABASE {{ $harvestername_int }};
    GRANT ALL PRIVILEGES ON {{ $harvestername_int }}.* TO '{{$harvesteruser}}'@'localhost';
    GRANT ALL PRIVILEGES ON {{ $harvestername_int }}.* TO '{{$harvesteruser}}'@'%';
    {{- end}}
    {{- end}}
    FLUSH PRIVILEGES;
