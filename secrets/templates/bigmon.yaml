{{- if .Values.bigmon.enabled }}

{{- $auth_providers := list -}}
{{- range $provider, $value := .Values.bigmon.auth.providers -}}
{{- $auth_providers = append $auth_providers $provider -}}
{{- end }}

# panda configuration
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets.fullname" . }}-bigmon-envs
type: Opaque
stringData:
  # bigmon
  BIGMON_HOST: "{{ .Values.bigmon.hostname }}"
  BIGMON_NUM_WSGI_PROC: "{{ .Values.bigmon.numWSGI }}"
  BIGMON_SECRET_KEY: "{{ .Values.bigmon.secretKey }}"
  BIGMON_VO: "{{ .Values.bigmon.vo }}"
  BIGMON_DEPLOYMENT: "{{ .Values.bigmon.deployment | default "POSTGRES" }}"
  BIGMON_DB_ACCESS: "{{ .Values.bigmon.dbaccess | default "dbaccess_postgres" }}"
  PRMON_LOGS_DIRECTIO_LOCATION: "{{ .Values.bigmon.prmonLocation }}"
  {{- if .Values.bigmon.debugMode }}
  BIGMON_DEBUG: "True"
  {{- else }}
  BIGMON_DEBUG: "False"
  {{- end }}
  # list of bigmon extra apps
  BIGMON_INSTALLED_APPS_LIST: "{{ .Values.bigmon.bigmon_extra }}"

  LOGS_PROVIDER: "{{ .Values.bigmon.logs_provider | default "rucio" }}"

  # Auth
  BIGMON_AUTH_PROVIDER_LIST: {{ join "," $auth_providers | quote}}
  {{- range $provider, $v := .Values.bigmon.auth.providers }}
  {{- range $kk, $vv := $v }}
  SOCIAL_AUTH_{{ upper $provider }}_{{ upper $kk }}: {{ $vv }}
  {{- end }}
  {{- end }}


  # PandaDB
  PANDA_DB_NAME: "{{ .Values.panda.database.name }}"
  PANDA_DB_HOST: "{{ .Values.panda.database.dbhost | default (printf "%s-postgres" (include "panda_ref" .)) }}"
  PANDA_DB_PORT: "{{ .Values.panda.database.dbport }}"
  PANDA_DB_USER: "{{ .Values.panda.database.user }}"
  PANDA_DB_PASSWORD: {{ .Values.panda.database.password }}
  
  # iDDS
  IDDS_DB_NAME: "{{ .Values.idds.database.name}}"
  IDDS_DB_HOST: "{{ .Values.idds.database.host | default (printf "%s-postgres" (include "idds_ref" .)) }}"
  IDDS_DB_PORT: "{{ .Values.idds.database.port }}"
  IDDS_DB_USER: "{{ .Values.idds.database.user}}"
  IDDS_DB_PASSWORD: "{{ .Values.idds.database.password}}"
  IDDS_DB_SCHEMA: "{{ .Values.idds.database.schema}}"

  IDDS_HOST: "{{ include "idds_ref" . }}-rest"
  IDDS_PORT: "{{ .Values.idds.restPort }}"
  IDDS_AUTH_ID_TOKEN: "{{ .Values.auth.authIdToken }}"
  IDDS_AUTH_VO: "{{ .Values.auth.authVO }}"

  # Rucio
  RUCIO_SERVER_HOST: "{{ .Values.rucio.rucioHost }}"
  RUCIO_AUTH_HOST: "{{ .Values.rucio.authHost }}"
  RUCIO_ACCOUNT: "{{ .Values.rucio.account }}"
  RUCIO_USERNAME: "{{ .Values.rucio.username }}"
  RUCIO_PASSWORD: "{{ .Values.rucio.password }}"
  RUCIO_CONFIG: "/opt/bigmon/etc/rucio.cfg"

  # CRIC
  {{- if .Values.cric.real }}
  CRIC_API_URL: "{{ .Values.cric.schedConfig }}"
  {{- else }}
  CRIC_API_URL: "http://{{ include "panda_ref" . }}-server:{{ .Values.panda.port }}/cric/panda_queues.json"
  {{- end }}

  # OBJECT_STORE
  {{- if hasKey .Values "object_store" }}
  host_name: "{{ .Values.object_store.host }}"
  port: "{{ .Values.object_store.port }}"
  bucket_name: "{{ .Values.object_store.bucket }}"
  access_key: "{{ .Values.object_store.accesskey }}"
  secret_key: "{{ .Values.object_store.secretkey }}"
  {{- end }}

  {{ include "set_proxy" . | indent 2 }}

---
# certs
# Ingest certs from on-disk .pem files
# unless we're expecting an existing secret defined via `bigmon.existingTlsSecret`.
{{- if not .Values.bigmon.existingTlsSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets.fullname" . }}-bigmon-certs
type: Opaque
data:
  {{- range $path, $_ := .Files.Glob "files/bigmon_certs/**.pem" }}
  {{ base $path }}: |-
    {{ $.Files.Get $path | b64enc }}
  {{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "secrets.fullname" . }}-bigmon-tls-certs
type: kubernetes.io/tls
data:
  tls.crt: |-
    {{ $.Files.Get "files/bigmon_certs/hostcert.pem" | b64enc }}
  tls.key: |-
    {{ $.Files.Get "files/bigmon_certs/hostkey.pem" | b64enc }}
{{- end }}

{{- end }}
