# pv
{{- if .Values.persistentvolume.create }}
kind: PersistentVolume
apiVersion: v1
metadata:
  name: {{ include "server.fullname" . }}
  labels:
      {{- include "server.labels" . | nindent 4 }}
spec:
  storageClassName: {{ .Values.persistentvolume.class }}
  capacity:
    storage: {{ .Values.persistentvolume.size }}
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Delete
  hostPath:
    path: {{ .Values.persistentvolume.path }}
---
{{- end }}
{{- if or .Values.persistentvolume.create .Values.sharedCache }}
# pv claim
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ include "server.fullname" . }}
  labels:
    {{- include "server.labels" . | nindent 4 }}
spec:
  storageClassName: {{ .Values.persistentvolume.class }}
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: {{ .Values.persistentvolume.size }}
  {{- if .Values.persistentvolume.selector }}
  selector:
    matchLabels:
      {{- include "server.selectorLabels" . | nindent 6 }}
  {{- end }}
---
{{- end }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "server.fullname" . }}
  labels:
    {{- include "server.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  serviceName: {{ include "server.fullname" . }}
  selector:
    matchLabels:
      {{- include "server.selectorLabels" . | nindent 6 }}
  template:
    metadata:

      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "server.selectorLabels" . | nindent 8 }}
    spec:
      hostname:  {{ .Release.Name }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "server.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.autoStart }}
          command: [ "/bin/sh", "-c" ]
          args:
            - |
              until /usr/pgsql-*/bin/pg_isready -h ${PANDA_DB_HOST} -p ${PANDA_DB_PORT}; do echo waiting for database; sleep 2; done;
              cp /opt/panda/sandbox/* /data/panda/;
              chmod +x /data/panda/init-panda;
              chmod +x /data/panda/run-panda-crons;
              chmod +x /data/panda/run-panda-services;
              mkdir -p /var/log/panda/pandacache/jedilog; chmod -R 777 /var/log/panda/pandacache || true;
              if [ -f /opt/panda/sandbox/panda_server-httpd.conf ]; then
                  mv /opt/panda/etc/panda/panda_server-httpd.conf /opt/panda/etc/panda/panda_server-httpd.conf.back;
                  ln -s /opt/panda/sandbox/panda_server-httpd.conf /opt/panda/etc/panda/panda_server-httpd.conf;
               fi;
              /opt/panda/bin/python /data/panda/process_template.py;
              /data/panda/run-panda-services;
              sleep infinity & wait
          {{- end }}
          ports:
            - name: http
              containerPort: 25080
              protocol: TCP
            - name: https
              containerPort: 25443
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - cat
                - /tmp/panda_server_start.log
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
             - name: {{ include "server.fullname" . }}-logs
               mountPath: /var/log/panda
             - name: {{ include "server.fullname" . }}-configjson
               mountPath: /opt/panda/etc/config_json
             - name: {{ include "server.fullname" . }}-auth
               mountPath: /opt/panda/etc/panda/auth
             - name: {{ include "server.fullname" . }}-sandbox
               mountPath: /opt/panda/sandbox
             - name: {{ include "server.fullname" . }}-certs
               mountPath: /opt/panda/etc/cert
             - name: {{ include "server.fullname" . }}-cric-jsons-volume
               mountPath: /var/cric
             {{- if and .Values.sharedCache (not .Values.persistentvolume.create) }}
             - name: {{ include "server.fullname" . }}-cache
               mountPath: /var/log/panda/pandacache
             {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "server.fullname" . }}-env
            - secretRef:
                name: {{ .Values.global.secret }}-panda-envs
          env:
            - name: PANDA_SERVER_CONF_SERVERNAME
              value: {{ include "server.fullname" . }}
            # set no_proxy since $() is resolved not in envFrom section
            - name: no_proxy
              value: $(no_proxy),$(PANDA_IDDS_HOST)
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: {{ include "server.fullname" . }}-configjson
          configMap:
              name: {{ include "server.fullname" . }}-configjson
        - name: {{ include "server.fullname" . }}-auth
          secret:
              secretName: {{ .Values.global.secret }}-panda-auth
        - name: {{ include "server.fullname" . }}-sandbox
          projected:
            sources:
              - configMap:
                  name: {{ include "server.fullname" . }}-sandbox
              - configMap:
                  name: {{ .Release.Name }}-external-sandbox
              - secret:
                  name: {{ .Values.global.secret }}-panda-token-cache
        - name: {{ include "server.fullname" . }}-certs
          {{- if .Values.global.existingTlsSecret }}
          secret:
              secretName: {{ .Values.global.existingTlsSecret }}
              items:
                # Map the TLS keys to the filenames panda expects
                - key: tls.crt
                  path: hostcert.pem
                - key: tls.key
                  path: hostkey.pem
                - key: tls.crt
                  path: chain.pem
          {{- else }}
          secret:
              secretName: {{ .Values.global.secret }}-panda-certs
          {{- end }}
        - name: {{ include "server.fullname" . }}-cric-jsons-volume
          secret:
              secretName: {{ .Values.global.secret }}-cric-jsons
              optional: true
        {{- if and .Values.sharedCache (not .Values.persistentvolume.create) }}
        - name: {{ include "server.fullname" . }}-cache
          persistentVolumeClaim:
            claimName: {{ include "server.fullname" . }}
        {{- end }}
  {{- if .Values.persistentvolume.create }}
        - name: {{ include "server.fullname" . }}-logs
          persistentVolumeClaim:
            claimName: {{ include "server.fullname" . }}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "server.fullname" . }}-logs
      spec:
        storageClassName: {{ .Values.persistentvolume.class }}
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.persistentvolume.size }}
  {{- end }}
